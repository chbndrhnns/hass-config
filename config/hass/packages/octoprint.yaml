octoprint:
  host: !secret octoprint_host
  api_key: !secret octoprint_api_key
  bed: true
  number_of_tools: 1


sensor:
  - platform: octoprint
    name: OctoPrint
    monitored_conditions:
      - Current State
      - Temperatures
      - Job Percentage


binary_sensor:
  - platform: octoprint
    monitored_conditions:
      - Printing
      - Printing Error


switch:
  - platform: command_line
    switches:
      3d_printer_led:
        friendly_name: "3D Printer LED"
        command_on: !secret octoprint_led_on_cmd
        command_off: !secret octoprint_led_off_cmd


light:
  - platform: template
    lights:
      3d_printer_led:
        friendly_name: "3D Printer LED"
        turn_on:
          service: switch.turn_on
          data:
            entity_id: switch.3d_printer_led
        turn_off:
          service: switch.turn_off
          data:
            entity_id: switch.3d_printer_led


camera:
  - platform: mjpeg
    name: octoprint
    mjpeg_url: !secret octoprint_camera_url


group:
  3d_printer:
    name: 3D Printer
    view: no
    control: hidden
    entities:
      - switch.3d_printer
      - light.3d_printer_led
      - camera.octoprint
      - binary_sensor.octoprint_printing
      - sensor.octoprint_job_percentage


automation:
  - alias: Notify when the current 3D print has finished
    initial_state: true
    trigger:
      platform: state
      entity_id: binary_sensor.octoprint_printing
      from: "on"
      to: "off"
    action:
      - service: script.tts_say
        data:
          message: "3D Print finished"
      - service: notify.zanzito_tts
        data:
          message: "3D Print finished"

  - alias: Notify when the current 3D print has errored out
    initial_state: true
    trigger:
      platform: state
      entity_id: binary_sensor.octoprint_printing_error
      from: "off"
      to: "on"
    action:
      service: notify.html5
      data:
        message: "Woops! The 3D print has failed..."

  - alias: Turn on lights if the sun goes down and there is an ongoing print
    initial_state: true
    trigger:
      platform: sun
      event: sunset
      offset: "-00:45:00"
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: binary_sensor.octoprint_printing
          state: "on"
        - condition: state
          entity_id: light.yeelight_office
          state: "off"
    action:
      - service: notify.html5
        data:
          message: "Turning office lights on so that the timelapse does not get fucked."
      - service: light.turn_on
        data:
          entity_id: light.yeelight_office

# vim: set filetype=yaml et sw=2 ts=2 :
